// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {JoinType as JoinType} from './enum.JoinType_generated.js';
import {TableType as TableType} from './enum.TableType_generated.js';
import {Field as Field} from './query.Field_generated.js';
import {FilterClause as FilterClause} from './query.FilterClause_generated.js';

/**
 * Query data-model structure.
 */
export class Model {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Model {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsModel(bb:flatbuffers.ByteBuffer, obj?:Model):Model {
  return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsModel(bb:flatbuffers.ByteBuffer, obj?:Model):Model {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

tables(index: number, obj?:Table):Table|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Table()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

tablesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

joins(index: number, obj?:Join):Join|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Join()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

joinsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startModel(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addTables(builder:flatbuffers.Builder, tablesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, tablesOffset, 0);
}

static createTablesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTablesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addJoins(builder:flatbuffers.Builder, joinsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, joinsOffset, 0);
}

static createJoinsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startJoinsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endModel(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createModel(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, tablesOffset:flatbuffers.Offset, joinsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Model.startModel(builder);
  Model.addName(builder, nameOffset);
  Model.addTables(builder, tablesOffset);
  Model.addJoins(builder, joinsOffset);
  return Model.endModel(builder);
}
}

/**
 * Query data-table structure.
 */
export class Table {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Table {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTable(bb:flatbuffers.ByteBuffer, obj?:Table):Table {
  return (obj || new Table()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTable(bb:flatbuffers.ByteBuffer, obj?:Table):Table {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Table()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():TableType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TableType.Json;
}

source():string|null
source(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
source(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fields(index: number, obj?:Field):Field|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

fieldsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTable(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:TableType) {
  builder.addFieldInt8(1, type, TableType.Json);
}

static addSource(builder:flatbuffers.Builder, sourceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, sourceOffset, 0);
}

static addFields(builder:flatbuffers.Builder, fieldsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, fieldsOffset, 0);
}

static createFieldsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFieldsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTable(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, type:TableType, sourceOffset:flatbuffers.Offset, fieldsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Table.startTable(builder);
  Table.addName(builder, nameOffset);
  Table.addType(builder, type);
  Table.addSource(builder, sourceOffset);
  Table.addFields(builder, fieldsOffset);
  return Table.endTable(builder);
}
}

/**
 * Query data-tables join structure.
 */
export class Join {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Join {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsJoin(bb:flatbuffers.ByteBuffer, obj?:Join):Join {
  return (obj || new Join()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsJoin(bb:flatbuffers.ByteBuffer, obj?:Join):Join {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Join()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():JoinType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : JoinType.Cross;
}

left():string|null
left(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
left(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

right():string|null
right(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
right(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

clause(obj?:FilterClause):FilterClause|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FilterClause()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startJoin(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, type:JoinType) {
  builder.addFieldInt8(0, type, JoinType.Cross);
}

static addLeft(builder:flatbuffers.Builder, leftOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, leftOffset, 0);
}

static addRight(builder:flatbuffers.Builder, rightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rightOffset, 0);
}

static addClause(builder:flatbuffers.Builder, clauseOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, clauseOffset, 0);
}

static endJoin(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}

