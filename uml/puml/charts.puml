@startuml index
  title Table of content

  object Content {
    +[[./init_workflow.svg Initial Workflow (observers)]]
    ....
    +[[./hdml_view_append.svg <hdml-view/> append workflow]]
    +[[./hdml_view_styles_changed.svg <hdml-view/> styles-changed workflow]]
    +[[./hdml_view_remove.svg <hdml-view/> remove workflow]]
    ....
    +[[./cartesian_plane_append.svg <cartesian-plane/> append workflow]]
    +[[./cartesian_plane_styles_changed.svg <cartesian-plane/> styles-changed workflow]]
    +[[./cartesian_plane_remove.svg <cartesian-plane/> remove workflow]]
    ....
    +[[./polar_plane_append.svg <polar-plane/> append workflow]]
    +[[./polar_plane_styles_changed.svg <polar-plane/> styles-changed workflow]]
    +[[./polar_plane_remove.svg <polar-plane/> remove workflow]]
  }
@enduml

@startuml init_workflow
  title Initial Workflow (observers)

  actor User
  participant Window
  control robserver
  control mobserver
  control dispatchImmediate
  control dispatchDelayed

  group #b3e5fc Init
    User -> Window: open

    create dispatchDelayed
    Window -> dispatchDelayed: creates

    create dispatchImmediate
    Window -> dispatchImmediate: creates

    Window -> mobserver: enable
    Window -> robserver: enable
  end

  group #b3e5fc Window Resized
    User -> Window: resize
    Window -> robserver: trigger
    robserver -> dispatchImmediate: run
    dispatchImmediate -> Window: call dispatchEvent(<b>"styles-changed"</b>)
    Window -> : dispatches <b>"styles-changed"</b>
  end

  group #b3e5fc Style Changed
    User -> Window: interact
    Window -> Window: change DOM-element style
    Window -> mobserver: trigger
    mobserver -> dispatchImmediate: run
    dispatchImmediate -> Window: call dispatchEvent(<b>"styles-changed"</b>)
    Window -> : dispatches <b>"styles-changed"</b>
  end

  group #b3e5fc Class Changed
    User -> Window: interact
    Window -> Window: change DOM-element class
    Window -> mobserver: trigger
    mobserver -> dispatchDelayed: run
    ==async==
    dispatchDelayed -> Window: call dispatchEvent(<b>"styles-changed"</b>)
    Window -> : dispatches <b>"styles-changed"</b>
  end
@enduml

@startuml hdml_view_append
  title <hdml-view/> append workflow

  participant Window

  box <hdml-view/> #e0e0e0
    participant AbstractChartElement
    collections HdmlViewElement
  end box

  -> Window: append <hdml-view/>
  Window -> HdmlViewElement: creates new HdmlViewElement()

  group #b3e5fc Pre-Update
    AbstractChartElement <- HdmlViewElement: runs super()
    Window <- AbstractChartElement: creates a shadow DOM
    Window <- AbstractChartElement: attaches styles to a shadow DOM

    group #039be5 connectedCallback
      AbstractChartElement -> HdmlViewElement: runs this.connectedCallback()
      AbstractChartElement <- HdmlViewElement: runs super.connectedCallback()
      AbstractChartElement -> Window: runs addEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> HdmlViewElement: runs render()
      AbstractChartElement <- HdmlViewElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 fistUpdated
      AbstractChartElement -> HdmlViewElement: runs this.firstUpdated()
      Window <- HdmlViewElement: render canvas in the shadow tree
      AbstractChartElement <- HdmlViewElement: runs super.firstUpdated()
    end

    group #039be5 updated
      AbstractChartElement -> HdmlViewElement: runs this.updated()
      Window <- HdmlViewElement: updates canvas in the shadow tree
      AbstractChartElement <- HdmlViewElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml hdml_view_styles_changed
  title <hdml-view/> styles-changed workflow

  actor User
  participant Window

  box <hdml-view/> #e0e0e0
    participant AbstractChartElement
    collections HdmlViewElement
  end box

  User -> Window: interact
  Window -> : dispatches <b>"styles-changed"</b> event
  AbstractChartElement <- : handle <b>"styles-changed"</b> event

  group #b3e5fc Pre-Update
    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> HdmlViewElement: runs render()
      AbstractChartElement <- HdmlViewElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 updated
      AbstractChartElement -> HdmlViewElement: runs this.updated()
      Window <- HdmlViewElement: updates canvas in the shadow tree
      AbstractChartElement <- HdmlViewElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml hdml_view_remove
  title <hdml-view/> remove workflow

  participant Window

  box <hdml-view/> #e0e0e0
    participant AbstractChartElement
    collections HdmlViewElement
  end box

  -> Window: remove <hdml-view/>

  group #b3e5fc Pre-Update

    group #039be5 disconnectedCallback
      AbstractChartElement -> HdmlViewElement: runs this.disconnectedCallback()
      AbstractChartElement <- HdmlViewElement: runs super.disconnectedCallback()
      AbstractChartElement -> Window: runs removeEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end
@enduml

@startuml cartesian_plane_append
  title <cartesian-plane/> append workflow

  participant Window

  box <cartesian-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections CartesianPlaneElement
  end box

  -> Window: append <cartesian-plane/>
  Window -> CartesianPlaneElement: creates new CartesianPlaneElement()

  group #b3e5fc Pre-Update
    AbstractPlaneElement <- CartesianPlaneElement: runs super()
    AbstractChartElement <- AbstractPlaneElement: runs super()
    Window <- AbstractChartElement: creates a shadow DOM
    Window <- AbstractChartElement: attaches styles to a shadow DOM

    group #039be5 connectedCallback
      AbstractChartElement -> CartesianPlaneElement: runs this.connectedCallback()
      AbstractPlaneElement <- CartesianPlaneElement: runs super.connectedCallback()
      AbstractChartElement <- AbstractPlaneElement: runs super.connectedCallback()
      AbstractChartElement -> Window: runs addEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> CartesianPlaneElement: runs render()
      AbstractChartElement <- CartesianPlaneElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 fistUpdated
      AbstractChartElement -> CartesianPlaneElement: runs this.firstUpdated()
      AbstractPlaneElement <- CartesianPlaneElement: runs super.firstUpdated()
      AbstractChartElement <- AbstractPlaneElement: runs super.firstUpdated()
    end

    group #039be5 updated
      AbstractChartElement -> CartesianPlaneElement: runs this.updated()
      AbstractPlaneElement <- CartesianPlaneElement: runs super.updated()
      AbstractChartElement <- AbstractPlaneElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml cartesian_plane_styles_changed
  title <cartesian-plane/> styles-changed workflow

  actor User
  participant Window

  box <cartesian-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections CartesianPlaneElement
  end box

  User -> Window: interact
  Window -> : dispatches <b>"styles-changed"</b> event
  AbstractChartElement <- : handle <b>"styles-changed"</b> event

  group #b3e5fc Pre-Update
    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> CartesianPlaneElement: runs render()
      AbstractChartElement <- CartesianPlaneElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 updated
      AbstractChartElement -> CartesianPlaneElement: runs this.updated()
      AbstractPlaneElement <- CartesianPlaneElement: runs super.updated()
      AbstractChartElement <- AbstractPlaneElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml cartesian_plane_remove
  title <cartesian-plane/> remove workflow

  participant Window

  box <cartesian-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections CartesianPlaneElement
  end box

  -> Window: remove <cartesian-plane/>

  group #b3e5fc Pre-Update

    group #039be5 disconnectedCallback
      AbstractChartElement -> CartesianPlaneElement: runs this.disconnectedCallback()
      AbstractPlaneElement <- CartesianPlaneElement: runs super.disconnectedCallback()
      AbstractChartElement <- AbstractPlaneElement: runs super.disconnectedCallback()
      AbstractChartElement -> Window: runs removeEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end
@enduml

@startuml polar_plane_append
  title <polar-plane/> append workflow

  participant Window

  box <polar-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections PolarPlaneElement
  end box

  -> Window: append <polar-plane/>
  Window -> PolarPlaneElement: creates new PolarPlaneElement()

  group #b3e5fc Pre-Update
    AbstractPlaneElement <- PolarPlaneElement: runs super()
    AbstractChartElement <- AbstractPlaneElement: runs super()
    Window <- AbstractChartElement: creates a shadow DOM
    Window <- AbstractChartElement: attaches styles to a shadow DOM

    group #039be5 connectedCallback
      AbstractChartElement -> PolarPlaneElement: runs this.connectedCallback()
      AbstractPlaneElement <- PolarPlaneElement: runs super.connectedCallback()
      AbstractChartElement <- AbstractPlaneElement: runs super.connectedCallback()
      AbstractChartElement -> Window: runs addEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> PolarPlaneElement: runs render()
      AbstractChartElement <- PolarPlaneElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 fistUpdated
      AbstractChartElement -> PolarPlaneElement: runs this.firstUpdated()
      AbstractPlaneElement <- PolarPlaneElement: runs super.firstUpdated()
      AbstractChartElement <- AbstractPlaneElement: runs super.firstUpdated()
    end

    group #039be5 updated
      AbstractChartElement -> PolarPlaneElement: runs this.updated()
      AbstractPlaneElement <- PolarPlaneElement: runs super.updated()
      AbstractChartElement <- AbstractPlaneElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml polar_plane_styles_changed
  title <polar-plane/> styles-changed workflow

  actor User
  participant Window

  box <polar-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections PolarPlaneElement
  end box

  User -> Window: interact
  Window -> : dispatches <b>"styles-changed"</b> event
  AbstractChartElement <- : handle <b>"styles-changed"</b> event

  group #b3e5fc Pre-Update
    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end

  ==async==

  group #b3e5fc Update
    AbstractChartElement -> AbstractChartElement: runs performUpdate()
    AbstractChartElement -> AbstractChartElement: runs shouldUpdate()
    AbstractChartElement -> AbstractChartElement: runs willUpdate()
    AbstractChartElement -> AbstractChartElement: runs update()
    
    group #039be5 render
      AbstractChartElement -> PolarPlaneElement: runs render()
      AbstractChartElement <- PolarPlaneElement: returns template
    end

    Window <- AbstractChartElement: updates shadow tree
  end

  group #b3e5fc Post-Updated
    group #039be5 updated
      AbstractChartElement -> PolarPlaneElement: runs this.updated()
      AbstractPlaneElement <- PolarPlaneElement: runs super.updated()
      AbstractChartElement <- AbstractPlaneElement: runs super.updated()
      AbstractChartElement -> : dispatches <b>"updated"</b> event
    end

    AbstractChartElement -> AbstractChartElement: resolves updateComplete
  end
@enduml

@startuml polar_plane_remove
  title <polar-plane/> remove workflow

  participant Window

  box <polar-plane/> #e0e0e0
    participant AbstractChartElement
    participant AbstractPlaneElement
    collections PolarPlaneElement
  end box

  -> Window: remove <polar-plane/>

  group #b3e5fc Pre-Update

    group #039be5 disconnectedCallback
      AbstractChartElement -> PolarPlaneElement: runs this.disconnectedCallback()
      AbstractPlaneElement <- PolarPlaneElement: runs super.disconnectedCallback()
      AbstractChartElement <- AbstractPlaneElement: runs super.disconnectedCallback()
      AbstractChartElement -> Window: runs removeEventListener(<b>"styles-changed"</b>)
    end

    AbstractChartElement -> AbstractChartElement: runs requestUpdate()
  end
@enduml